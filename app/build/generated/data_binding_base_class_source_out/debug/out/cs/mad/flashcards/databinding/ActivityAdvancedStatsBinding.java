// Generated by view binder compiler. Do not edit!
package cs.mad.flashcards.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import cs.mad.flashcards.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAdvancedStatsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView advancedStatsTitle;

  @NonNull
  public final TextView cityValue;

  @NonNull
  public final TextView descriptionValue;

  @NonNull
  public final TextView feelsLikeValue;

  @NonNull
  public final TextView humidityValue;

  @NonNull
  public final TextView maxTempValue;

  @NonNull
  public final TextView minTempValue;

  @NonNull
  public final TextView sunriseValue;

  @NonNull
  public final TextView sunsetValue;

  private ActivityAdvancedStatsBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView advancedStatsTitle, @NonNull TextView cityValue,
      @NonNull TextView descriptionValue, @NonNull TextView feelsLikeValue,
      @NonNull TextView humidityValue, @NonNull TextView maxTempValue,
      @NonNull TextView minTempValue, @NonNull TextView sunriseValue,
      @NonNull TextView sunsetValue) {
    this.rootView = rootView;
    this.advancedStatsTitle = advancedStatsTitle;
    this.cityValue = cityValue;
    this.descriptionValue = descriptionValue;
    this.feelsLikeValue = feelsLikeValue;
    this.humidityValue = humidityValue;
    this.maxTempValue = maxTempValue;
    this.minTempValue = minTempValue;
    this.sunriseValue = sunriseValue;
    this.sunsetValue = sunsetValue;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAdvancedStatsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAdvancedStatsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_advanced_stats, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAdvancedStatsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.advanced_stats_title;
      TextView advancedStatsTitle = rootView.findViewById(id);
      if (advancedStatsTitle == null) {
        break missingId;
      }

      id = R.id.city_value;
      TextView cityValue = rootView.findViewById(id);
      if (cityValue == null) {
        break missingId;
      }

      id = R.id.description_value;
      TextView descriptionValue = rootView.findViewById(id);
      if (descriptionValue == null) {
        break missingId;
      }

      id = R.id.feels_like_value;
      TextView feelsLikeValue = rootView.findViewById(id);
      if (feelsLikeValue == null) {
        break missingId;
      }

      id = R.id.humidity_value;
      TextView humidityValue = rootView.findViewById(id);
      if (humidityValue == null) {
        break missingId;
      }

      id = R.id.max_temp_value;
      TextView maxTempValue = rootView.findViewById(id);
      if (maxTempValue == null) {
        break missingId;
      }

      id = R.id.min_temp_value;
      TextView minTempValue = rootView.findViewById(id);
      if (minTempValue == null) {
        break missingId;
      }

      id = R.id.sunrise_value;
      TextView sunriseValue = rootView.findViewById(id);
      if (sunriseValue == null) {
        break missingId;
      }

      id = R.id.sunset_value;
      TextView sunsetValue = rootView.findViewById(id);
      if (sunsetValue == null) {
        break missingId;
      }

      return new ActivityAdvancedStatsBinding((RelativeLayout) rootView, advancedStatsTitle,
          cityValue, descriptionValue, feelsLikeValue, humidityValue, maxTempValue, minTempValue,
          sunriseValue, sunsetValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
